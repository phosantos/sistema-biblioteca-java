/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package view.ViewAcervo;

import dao.ItemDAO;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import model.Item;

/**
 *
 * @author Pedro Santos
 */
public class ViewListarAcervo extends javax.swing.JInternalFrame {

    /**
     * Creates new form ViewListarUsuarios
     */
    public ViewListarAcervo() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableUsuarios = new javax.swing.JTable();
        ordernarControl = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();

        setClosable(true);
        setTitle("Listar Itens");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        tableUsuarios.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tableUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Titulo", "Autor", "Editora", "Categoria", "Descrição", "Ano de publicação", "Disponível"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableUsuarios.setCellSelectionEnabled(true);
        jScrollPane1.setViewportView(tableUsuarios);

        ordernarControl.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        ordernarControl.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID", "Título", "Autor", "Editora", "Categoria", "Ano de Publicação" }));
        ordernarControl.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ordernarControlItemStateChanged(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setText("Ordenar por:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1090, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ordernarControl, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ordernarControl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ordernarControlItemStateChanged(java.awt.event.ItemEvent evt) {// GEN-FIRST:event_ordernarControlItemStateChanged
        String sql = "SELECT * from item";

        switch (ordernarControl.getSelectedItem().toString()) {
            case "ID":
                sql = "SELECT * from acervo ORDER by id";
                break;
            case "Título":
                sql = "SELECT * from acervo ORDER by titulo";
                break;
            case "Autor":
                sql = "SELECT * from acervo ORDER by autor";
                break;
            case "Editora":
                sql = "SELECT * from acervo ORDER by editora";
                break;
            case "Categoria":
                sql = "SELECT * from acervo ORDER by categoria";
                break;
            case "Ano de Publicação":
                sql = "SELECT * from acervo ORDER by ano_publicacao";
                break;

            default:
                break;
        }

        ItemDAO dao;
        List<Item> items;
        DefaultTableModel table = (DefaultTableModel) tableUsuarios.getModel();
        table.setNumRows(0);

        try {
            dao = new ItemDAO();
            items = dao.listItems(sql);
            String disponivel;

            for (Item item : items) {
                disponivel = item.getIsAvailable() ? "Sim" : "Não";
                Object[] itemData = { item.getId(), item.getTitle(), item.getAuthor(), item.getPublisher(),
                        item.getKind(), item.getDescription(), item.getPublicationYear(), disponivel };
                table.addRow(itemData);
            }
            ;
            dao.close();
        } catch (SQLException ex) {
            Logger.getLogger(ViewListarAcervo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }// GEN-LAST:event_ordernarControlItemStateChanged

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {// GEN-FIRST:event_formInternalFrameActivated

        ItemDAO dao;
        List<Item> items;
        DefaultTableModel table = (DefaultTableModel) tableUsuarios.getModel();
        table.setNumRows(0);
        String sql = "SELECT * from acervo";

        try {
            dao = new ItemDAO();
            items = dao.listItems(sql);
            String disponivel;

            for (Item item : items) {
                disponivel = item.getIsAvailable() ? "Sim" : "Não";
                Object[] itemData = { item.getId(), item.getTitle(), item.getAuthor(), item.getPublisher(),
                        item.getKind(), item.getDescription(), item.getPublicationYear(), disponivel };
                table.addRow(itemData);
            }
            ;
            dao.close();
        } catch (SQLException ex) {
            Logger.getLogger(ViewListarAcervo.class.getName()).log(Level.SEVERE, null, ex);
        }

    }// GEN-LAST:event_formInternalFrameActivated

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> ordernarControl;
    private javax.swing.JTable tableUsuarios;
    // End of variables declaration//GEN-END:variables
}
